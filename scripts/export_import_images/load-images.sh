#!/bin/bash
list="images-full.txt"
input="images.tar.gz"

usage () {
    echo "USAGE: $0 "
    echo "  [ --image-list | -l ] text file of image list; one image per line (deafult: ${list})"
    echo "  [ --input      | -i ] tar.gz generated by previous save script (default: ${input})"
    echo "  [ --registry   | -r ] target private registry address (syntax: registry:port)"
    echo "  [ --help       | -h ] Usage message"
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -r|--registry)
        reg="$2"
        shift # past argument
        shift # past value
        ;;
        -l|--image-list)
        list="$2"
        shift # past argument
        shift # past value
        ;;
        -i|--input)
        input="$2"
        shift # past argument
        shift # past value
        ;;
        -h|--help)
        help="true"
        shift
        ;;
        *)
        usage
        exit 1
        ;;
    esac
done

# exit if theres no registry value provided
if [[ -z $reg ]]; then
    usage
    exit 1
fi

if [[ $help ]]; then
    usage
    exit 0
fi

# load archived docker images
echo "loading images from archive..."
docker load --input ${input}

# create a list of images from the file in --image-list value
linux_images=()
while IFS= read -r i; do
    [ -z "${i}" ] && continue
    linux_images+=("${i}");
done < "${list}"

# function which returns the image:tag from a single input
remove_domain_prefix () {
if [ -z $(echo $1 | awk -F "/" '{print $4}') ]; then
    if [ -z $(echo $1 | awk -F "/" '{print $3}') ]; then
        if [ -z $(echo $1 | awk -F "/" '{print $2}') ]; then
            echo $1
        else
            echo $(echo "${1}" | awk -F "/" '{print $2}')
        fi
    else
        echo $(echo "${1}" | awk -F "/" '{print $3}')
    fi
else
    echo $(echo "${1}" | awk -F "/" '{print $4}')
fi
}

count=0
total=$(cat $list | wc -l)

for i in "${linux_images[@]}"; do
    [ -z "${i}" ] && continue

    (( count++ ))
    new_image_tag=$(remove_domain_prefix ${i})
    image_name="${reg}/${new_image_tag}"

    echo ""
    echo "### Handling image ${count}/${total} ###"
    docker tag "${i}" "${image_name}"
    echo "Re-tagged '${i}', as '${image_name}'"
    docker push "${image_name}"
    echo "Image pushed successfully: '${image_name}'"
done
